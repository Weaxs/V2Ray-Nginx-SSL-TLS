# HTTPS server
#
server {
    #监听443端口  启用ssl和http2
    listen       443 ssl http2;

    #强制HTTP使用HTTPS(HSTS)
    add_header   Strict-Transport-Security "max-age=31536000; includeSubdomains";
    #HTTP协议安全头部  禁用内容嗅探
    add_header   X-Content-Type-Options nosniff;
    #响应头配置避免点击劫持攻击 SAMEORIGIN表示该页面可以在相同域名页面的 frame 中展示
    add_header   X-Frame-Options SAMEORIGIN;
        
    server_name  example.org;

    #ssl证书
    ssl_certificate      /../server.crt;
    ssl_certificate_key  /../server.key;

    #设置ssl/tls会话缓存的类型和大小
    ssl_session_cache shared:SSL:10m;
    #重用会话缓存中ssl参数的过期时间
    ssl_session_timeout  5m;

    #加密套件
    ssl_ciphers  "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";
    #设置协商加密算法时，优先使用我们服务端的加密套件
    ssl_prefer_server_ciphers   on;

    #启动特定的加密协议
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

    #OCSP在线证书动态协议，需要认证的ca.prm
    #ssl_stapling on;
    #ssl_stapling_verify on;
    #ssl_trusted_certificate /../ca.pem;

    #创建自定义Diffie-Hellman密钥交换
    ssl_dhparam /../dhparam.pem;
 
    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #报错界面重定向
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}
